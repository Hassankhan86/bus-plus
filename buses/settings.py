"""
Django settings for buses project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

import os
import base64
from pathlib import Path


def get_env(key, default):
    return os.environ.get(key, default)


def get_bool_env(key, default):
    return os.environ.get(key, str(default)).lower() == "true"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sfy#ru2g2s*1(^0e7#pe0feuv4@+vp20-8eqq+-id2%aa6bdlz'

# SECRET_KEY = ''
FIELD_ENCRYPTION_KEY = b''
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_bool_env("DEBUG", False)
MAINTENANCE_MODE = get_bool_env("MAINTENANCE_MODE", False)

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'booking',
    'crm',
    'rest_framework',
    'rest_framework.authtoken',
    'django_celery_beat',
    # 'django_celery_results',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',  # Make sure this is included
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'buses.middleware.MaintenanceMiddleware',
    'buses.middleware.AuthenticatedUserMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'buses.urls'
REST_FRAMEWORK = {
    'DATE_INPUT_FORMATS': ["%d-%m-%Y", ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'error.log',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'ERROR',
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'buses.context_processors.crm_data',
            ],
        },
    },
]

WSGI_APPLICATION = 'buses.wsgi.application'
AUTH_USER_MODEL = 'booking.User'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'HOST': os.environ.get('DB_HOST', 'localhost'),
#         'PORT': os.environ.get('DB_PORT', '5432'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'Buses-Plus-Website-main',
        'USER': 'postgres',
        'PASSWORD': 'khan121',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",  

]
# Define the directory where static files will be collected
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

TAX_PERCENTAGE = 3  # 3%
SERVICE_CHARGES = 1  # +1 simply this amount will add to the total

# Celery and beat
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')
EMAIL_PORT = os.environ.get('SMTP_PORT', 587)
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("SMTP_EMAIL", '')
ADMIN_USER = os.environ.get("SMTP_EMAIL", '')
ADMIN_USERS = list({ADMIN_USER, EMAIL_HOST_USER})
EMAIL_HOST_PASSWORD = os.environ.get("SMTP_PASSWORD", '')

# Payment
STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_PUBLIC_KEY")
STRIPE_PRIVATE_KEY = os.environ.get("STRIPE_PRIVATE_KEY")
STRIPE_ENDPOINT_SECRET = os.environ.get("STRIPE_ENDPOINT_SECRET")
XERO_CLIENT = os.environ.get("XERO_CLIENT")
XERO_SECRET = os.environ.get("XERO_SECRET")
XERO_REDIRECT_URI = os.environ.get("XERO_REDIRECT_URI")

# scheduling
BOOKING_PAYMENT_DEADLINE_MINUTES = os.environ.get("BOOKING_PAYMENT_DEADLINE_MINUTES", 60)
BOOKING_PAYMENT_DEADLINE_HOURS = os.environ.get("BOOKING_PAYMENT_DEADLINE_HOURS", 0)
BOOKING_PAYMENT_DEADLINE_DAYS = os.environ.get("BOOKING_PAYMENT_DEADLINE_DAYS", 0)

# Setting
IS_BUSES_SHOW_TO_USER = get_bool_env("IS_BUSES_SHOW_TO_USER", True)

DEVELOPEDBY = os.environ.get("DEVELOPEDBY")

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/login/'

SELF_DRIVE_PICKUP_ADDRESS = "1B McPherson St, Banksmeadow NSW 2019"

SELF_DRIVE_SCHEDULE = {
    "Tuesday": (
        get_env('TUESDAY_START_HOUR', "7:00"),
        get_env('TUESDAY_END_HOUR', "17:00"),
    ),
    "Wednesday": (
        get_env('WEDNESDAY_START_HOUR', "7:00"),
        get_env('WEDNESDAY_END_HOUR', "17:00"),
    ),
    "Thursday": (
        get_env('THURSDAY_START_HOUR', "7:00"),
        get_env('THURSDAY_END_HOUR', "17:00"),
    ),
    "Friday": (
        get_env('FRIDAY_START_HOUR', "7:00"),
        get_env('FRIDAY_END_HOUR', "17:00"),
    ),
    "Saturday": (
        get_env('SATURDAY_START_HOUR', "7:00"),
        get_env('SATURDAY_END_HOUR', "11:30"),
    ),
    "Sunday": (
        get_env('SUNDAY_START_HOUR', "7:00"),
        get_env('SUNDAY_END_HOUR', "10:00"),
    ),
    "Monday": (
        get_env('MONDAY_START_HOUR', "7:00"),
        get_env('MONDAY_END_HOUR', "17:00"),
    ),
}


GOOGLE_OAUTH2_CLIENT_ID = get_env("GOOGLE_OAUTH2_CLIENT_ID",default="")
GOOGLE_OAUTH2_CLIENT_SECRET = get_env("GOOGLE_OAUTH2_CLIENT_SECRET",default="")
BACKEND_URI = get_env("BACKEND_URI",default="http://localhost:8000/")
FRONTEND_CRM_URL = os.path.join(BACKEND_URI,"/crm/google")
GOOGLE_REDIRECT_URI = os.path.join(BACKEND_URI, "api/google/login/callback")
GOOGLE_SCOPES_AUTH_URI = "https://www.googleapis.com/auth/"
GOOGLE_USER_INFO_URI = "https://www.googleapis.com/oauth2/v3/userinfo"
GOOGLE_AUTHORITY = "https://accounts.google.com/o/oauth2/auth/oauthchooseaccount"
GOOGLE_ACCESS_TOKEN_OBTAIN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_SCOPES = ['profile', 'email', 'calendar.events']

